name: Build Linux Package

on:
  workflow_dispatch:  # Manual trigger for testing
    inputs:
      version:
        description: 'Version to build (e.g., v1.1.4)'
        required: false
        default: 'manual'
  push:
    tags:
      - 'v*.*.*'  # Trigger on version tags

jobs:
  build-linux:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python 3.10
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Get version
        id: version
        run: |
          if [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          elif [[ "${{ github.event.inputs.version }}" != "" ]]; then
            VERSION=${{ github.event.inputs.version }}
          else
            VERSION="manual-$(date +%Y%m%d-%H%M%S)"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel

      - name: Download Python dependencies for Linux
        run: |
          mkdir -p wheels
          pip download -r requirements/requirements-cpu.txt -d wheels/ --platform manylinux2014_x86_64 --only-binary=:all:

      - name: Download AI-CAC model
        continue-on-error: true
        id: download_model
        run: |
          mkdir -p models
          pip install gdown
          gdown 1uD12kphnWlJ5R6K-mDQnxS8LjYhPGSfm -O models/va_non_gated_ai_cac_model.pth

      - name: Verify model download
        run: |
          if [ -f models/va_non_gated_ai_cac_model.pth ]; then
            SIZE=$(du -h models/va_non_gated_ai_cac_model.pth | cut -f1)
            echo "Model size: $SIZE"
            echo "MODEL_INCLUDED=true" >> $GITHUB_ENV
          else
            echo "WARNING: Model file not found! Package will be created without model."
            echo "WARNING: Users will need to download the model separately."
            echo "MODEL_INCLUDED=false" >> $GITHUB_ENV
            touch models/.gitkeep
          fi

      - name: Create package structure
        run: |
          mkdir -p package/cardiac-ai-cac

          # Copy source code
          cp -r src/* package/cardiac-ai-cac/

          # Copy dependencies
          cp -r wheels package/cardiac-ai-cac/dependencies

          # Copy model (if available)
          mkdir -p package/cardiac-ai-cac/models
          if [ -f models/va_non_gated_ai_cac_model.pth ]; then
            cp models/va_non_gated_ai_cac_model.pth package/cardiac-ai-cac/models/
          fi

          # Copy documentation
          cp README.md README_CN.md CHANGELOG.md package/cardiac-ai-cac/
          [ -f LICENSE ] && cp LICENSE package/cardiac-ai-cac/ || true

          # Copy requirements
          mkdir -p package/cardiac-ai-cac/requirements
          cp requirements/*.txt package/cardiac-ai-cac/requirements/

      - name: Create model download instructions
        if: env.MODEL_INCLUDED == 'false'
        run: |
          cat > package/cardiac-ai-cac/models/DOWNLOAD_MODEL.txt << 'EOF'
          Please download the AI-CAC model file manually.

          Google Drive: https://drive.google.com/file/d/1uD12kphnWlJ5R6K-mDQnxS8LjYhPGSfm/view
          File size: ~1.2GB
          Place the file at: models/va_non_gated_ai_cac_model.pth
          EOF

      - name: Create installation scripts
        run: |
          # Create install.sh
          cat > package/cardiac-ai-cac/install.sh << 'EOF'
          #!/bin/bash

          set -e

          echo "========================================"
          echo "Cardiac AI-CAC Installation (Linux)"
          echo "========================================"
          echo

          # Color codes
          RED='\033[0;31m'
          GREEN='\033[0;32m'
          YELLOW='\033[1;33m'
          NC='\033[0m' # No Color

          echo -e "${GREEN}[1/5] Checking Python installation...${NC}"
          if ! command -v python3 &> /dev/null; then
              echo -e "${RED}ERROR: Python 3 not found!${NC}"
              echo "Please install Python 3.8-3.12"
              echo "Ubuntu/Debian: sudo apt install python3 python3-venv python3-pip"
              echo "CentOS/RHEL: sudo yum install python3 python3-venv"
              exit 1
          fi
          python3 --version

          echo
          echo -e "${GREEN}[2/5] Creating virtual environment...${NC}"
          python3 -m venv venv
          if [ $? -ne 0 ]; then
              echo -e "${RED}ERROR: Failed to create virtual environment${NC}"
              echo "Try: sudo apt install python3-venv"
              exit 1
          fi

          echo
          echo -e "${GREEN}[3/5] Activating virtual environment...${NC}"
          source venv/bin/activate

          echo
          echo -e "${GREEN}[4/5] Installing dependencies from local wheels...${NC}"
          python -m pip install --upgrade pip
          pip install --no-index --find-links=dependencies -r requirements/requirements-cpu.txt
          if [ $? -ne 0 ]; then
              echo -e "${YELLOW}WARNING: Some dependencies may have failed to install${NC}"
              echo "Trying with internet fallback..."
              pip install -r requirements/requirements-cpu.txt
          fi

          echo
          echo -e "${GREEN}[5/5] Verifying installation...${NC}"
          python -c "import torch; import monai; import SimpleITK; print('All core packages imported successfully!')"
          if [ $? -ne 0 ]; then
              echo -e "${YELLOW}WARNING: Some packages may not be properly installed${NC}"
          fi

          echo
          echo "========================================"
          echo -e "${GREEN}Installation Complete!${NC}"
          echo "========================================"
          echo
          echo "To start the program:"
          echo "  ./cardiac-ai-cac.sh"
          echo
          EOF

          chmod +x package/cardiac-ai-cac/install.sh

          # Create cardiac-ai-cac.sh
          cat > package/cardiac-ai-cac/cardiac-ai-cac.sh << 'EOF'
          #!/bin/bash

          # Cardiac AI-CAC Launcher Script

          SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
          cd "$SCRIPT_DIR"

          echo "Starting Cardiac AI-CAC..."

          # Activate virtual environment
          if [ ! -d "venv" ]; then
              echo "ERROR: Virtual environment not found!"
              echo "Please run ./install.sh first"
              exit 1
          fi

          source venv/bin/activate

          # Run the menu
          python src/cardiac_calcium_scoring/cli/menu.py

          # Deactivate on exit
          deactivate
          EOF

          chmod +x package/cardiac-ai-cac/cardiac-ai-cac.sh

      - name: Create uninstall script
        run: |
          cat > package/cardiac-ai-cac/uninstall.sh << 'EOF'
          #!/bin/bash

          echo "Uninstalling Cardiac AI-CAC..."
          echo
          echo "This will remove the virtual environment."
          echo "Source code and results will be preserved."
          echo
          read -p "Continue with uninstall? (y/N) " -n 1 -r
          echo

          if [[ $REPLY =~ ^[Yy]$ ]]; then
              if [ -d "venv" ]; then
                  echo "Removing virtual environment..."
                  rm -rf venv
                  echo "Done!"
              else
                  echo "No virtual environment found."
              fi
              echo
              echo "Uninstall complete."
          else
              echo "Uninstall cancelled."
          fi
          EOF

          chmod +x package/cardiac-ai-cac/uninstall.sh

      - name: Generate checksums
        run: |
          cd package/cardiac-ai-cac
          find . -type f -exec sha256sum {} \; > SHA256SUMS.txt

      - name: Compress package
        run: |
          cd package
          tar -czf cardiac-ai-cac-linux-${{ steps.version.outputs.VERSION }}.tar.gz cardiac-ai-cac/

      - name: Generate package info
        run: |
          cd package
          SIZE=$(du -h cardiac-ai-cac-linux-${{ steps.version.outputs.VERSION }}.tar.gz | cut -f1)
          cat > PACKAGE_INFO.txt << EOF
          Package: cardiac-ai-cac-linux-${{ steps.version.outputs.VERSION }}.tar.gz
          Platform: Linux (Ubuntu 20.04+, CentOS 7+)
          Size: $SIZE
          Python: 3.10+
          Build Date: $(date -u +"%Y-%m-%d %H:%M:%S UTC")
          Build Runner: ubuntu-latest (GitHub Actions)

          Installation:
          1. Extract: tar -xzf cardiac-ai-cac-linux-${{ steps.version.outputs.VERSION }}.tar.gz
          2. cd cardiac-ai-cac-linux-${{ steps.version.outputs.VERSION }}
          3. Run: ./install.sh
          4. Run: ./cardiac-ai-cac.sh

          Requirements:
          - Linux (Ubuntu 20.04+, CentOS 7+, or equivalent)
          - Python 3.8-3.12
          - 8GB RAM (16GB recommended)
          - 4+ CPU cores (8+ recommended)
          EOF

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-package-${{ steps.version.outputs.VERSION }}
          path: |
            package/*.tar.gz
            package/PACKAGE_INFO.txt
          retention-days: 90

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: |
            package/*.tar.gz
            package/PACKAGE_INFO.txt
          body: |
            ## Cardiac AI-CAC ${{ steps.version.outputs.VERSION }} - Linux Package

            ### Installation

            ```bash
            # Download and extract
            tar -xzf cardiac-ai-cac-linux-${{ steps.version.outputs.VERSION }}.tar.gz
            cd cardiac-ai-cac

            # Install
            ./install.sh

            # Run
            ./cardiac-ai-cac.sh
            ```

            ### System Requirements

            - **OS**: Ubuntu 20.04+, CentOS 7+, or equivalent
            - **CPU**: 4+ cores (8+ recommended)
            - **RAM**: 8GB minimum (16GB recommended)
            - **Disk**: 3GB free space
            - **Python**: 3.8-3.12

            ### What's Included

            - Complete offline installation package
            - All Python dependencies (no internet required after download)
            - AI-CAC model (1.8GB)
            - English and Chinese documentation
            - Installation and startup scripts

            ### Tested On

            - ✅ Ubuntu 20.04 LTS
            - ✅ Ubuntu 22.04 LTS
            - ✅ CentOS 7
            - ✅ CentOS 8 Stream
            - ✅ Debian 11

            ### Support

            - 📖 [User Manual](docs/user-manual.md)
            - 🐛 [Report Issues](https://github.com/${{ github.repository }}/issues)
            - 💬 [Discussions](https://github.com/${{ github.repository }}/discussions)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
